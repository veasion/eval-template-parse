options {
    STATIC = false;
    JDK_VERSION = "1.8";
    IGNORE_CASE = false;
    DEBUG_LOOKAHEAD = false;
}

PARSER_BEGIN(Calculator)
package cn.veasion.eval;
import java.util.Map;
import java.util.HashMap;
import java.io.StringReader;
import java.math.BigDecimal;
import cn.veasion.eval.EvalObjectUtils;
public class Calculator {
    static int SCALE = 6;
    static int ROUNDING_MODE = BigDecimal.ROUND_HALF_UP;
    private Object object;
    private Map<String, Object> varMap;

    public void setObject(Object object) {
        this.object = object;
        this.varMap = new HashMap<>();
    }

    public Map<String, Object> getVarMap() {
        return varMap;
    }

    public BigDecimal eval(String eval) throws Exception {
        return eval(null, eval);
    }

    public BigDecimal eval(Object object, String eval) throws Exception {
        setObject(object);
        ReInit(new StringReader(eval));
        return eval();
    }

    public void putVar(Token token, Token endToken, Object val) {
        if (token == endToken || endToken == null) {
            varMap.put(token.image, val);
        } else {
            StringBuilder sb = new StringBuilder();
            appendToken(sb, token, endToken);
            varMap.put(sb.toString(), val);
        }
    }

    private void appendToken(StringBuilder sb, Token token, Token endToken) {
        sb.append(token.image);
        if (token == endToken || token.next == null) {
            return;
        }
        appendToken(sb, token.next, endToken);
    }
}
PARSER_END(Calculator)

SKIP : { " " | "\n" | "\r" | "\r\n" }
TOKEN : { <LPAREN: "("> | <RPAREN: ")"> }
TOKEN : { <LBRACKET: "["> | <RBRACKET: "]"> }
TOKEN : { <ADD: "+"> | <SUBTRACT: "-"> }
TOKEN : { <MULTIPLY: "*" | "×"> | <DIVIDE: "/" | "÷"> }
TOKEN : { <DIVIDE_REMAINDER: "%"> }
TOKEN : { <POW: "^"> | <SQRT: "√"> }
TOKEN : { <POINT: "."> | <QUOTATION: "'" | "\""> | <OR: "|"> }
TOKEN : { <NUMBER: <DIGITS> | <DIGITS> "." <DIGITS>> }
TOKEN : { <VAR: <STR_VAR> | <STR_VAR><DIGITS> | <STR_VAR><DIGITS><STR_VAR>> }
TOKEN : { <#DIGITS: (["0"-"9"])+> }
TOKEN : { <#STR_VAR: (["a"-"z", "A"-"Z", "\u4e00"-"\u9fa5", "_"])+> }

BigDecimal eval(): { BigDecimal result; }
{
    result = calc()
    <EOF>
    { return result; }
}

BigDecimal calc(): { BigDecimal temp; BigDecimal result; }
{
    result = multiplyDivideLevel()
    (
        <ADD>
        temp = multiplyDivideLevel()
        { result = result.add(temp); }
        | <SUBTRACT>
        temp = multiplyDivideLevel()
        { result = result.subtract(temp); }
    ) *
    { return result; }
}

BigDecimal multiplyDivideLevel(): { BigDecimal temp; BigDecimal result; }
{
    result = powSqrtLevel()
    (
        <MULTIPLY>
        temp = powSqrtLevel()
        { result = result.multiply(temp); }
        | <DIVIDE>
        temp = powSqrtLevel()
        { result = result.divide(temp, SCALE, ROUNDING_MODE); }
        | <DIVIDE_REMAINDER>
        temp = powSqrtLevel()
        { result = result.divideAndRemainder(temp)[1]; }
    ) *
    { return result; }
}

BigDecimal powSqrtLevel(): { BigDecimal temp; BigDecimal result; }
{
    result = getNumber()
    (
        <SQRT>
        temp = getNumber()
        { result = BigDecimal.valueOf(Math.pow(temp.doubleValue(), BigDecimal.ONE.divide(result, SCALE, ROUNDING_MODE).doubleValue())); }
        | <POW>
        temp = getNumber()
        { result = BigDecimal.valueOf(Math.pow(result.doubleValue(), temp.doubleValue())); }
    ) *
    { return result; }
}

BigDecimal getNumber(): { Token token; BigDecimal val; Object obj; }
{
    token = <NUMBER>
    { return new BigDecimal(token.image); }
    | token = <VAR> obj = evalVar(object, token.image)
    {
        putVar(token, getToken(0), obj);
        return EvalObjectUtils.toBigDecimal(obj);
    }
    | <LPAREN> val = calc() <RPAREN>
    { return val; }
    | <SQRT> val = getNumber()
    { return BigDecimal.valueOf(Math.sqrt(val.doubleValue())); }
    | <SUBTRACT> val = getNumber()
    { return val.negate(); }
}

Object evalVar(Object obj, String var): { Token token; }
{
    { obj = EvalObjectUtils.parseObject(obj, var); }
    (
        <POINT> token = <VAR>
        obj = evalVar(obj, token.image)
        | <LBRACKET> obj = evalArray(obj) <RBRACKET>
    ) *
    (
        <OR> token = <NUMBER>
         { obj = obj != null ? obj : token.image; }
    ) ?
    { return obj; }
}

Object evalArray(Object obj): { Token token; Object temp; }
{
    (
        token = <NUMBER>
        { obj = EvalObjectUtils.parseArray(obj, token.image); }
        | LOOKAHEAD(2)
        <QUOTATION> token = <VAR> <QUOTATION>
        { obj = EvalObjectUtils.parseObject(obj, token.image); }
        | <QUOTATION> token = <NUMBER> <QUOTATION>
        { obj = EvalObjectUtils.parseObject(obj, token.image); }
        | token = <VAR>
        temp = evalVar(object, token.image)
        {
            putVar(token, getToken(0), temp);
            obj = EvalObjectUtils.parse(obj, temp);
        }
    )
    { return obj; }
}